/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.AdminBatchTransfer', null, global);
goog.exportSymbol('proto.proto.AdminTransfer', null, global);
goog.exportSymbol('proto.proto.Approve', null, global);
goog.exportSymbol('proto.proto.BatchTransfer', null, global);
goog.exportSymbol('proto.proto.Burn', null, global);
goog.exportSymbol('proto.proto.InitGTC', null, global);
goog.exportSymbol('proto.proto.Join', null, global);
goog.exportSymbol('proto.proto.Mint', null, global);
goog.exportSymbol('proto.proto.Primitive', null, global);
goog.exportSymbol('proto.proto.PrimitiveHeader', null, global);
goog.exportSymbol('proto.proto.SetApprovalForAll', null, global);
goog.exportSymbol('proto.proto.Transfer', null, global);
goog.exportSymbol('proto.proto.UpdateRate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Transfer.displayName = 'proto.proto.Transfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Transfer}
 */
proto.proto.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Transfer;
  return proto.proto.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Transfer}
 */
proto.proto.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokenid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.proto.Transfer.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Transfer.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.proto.Transfer.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.Transfer.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 tokenid = 3;
 * @return {number}
 */
proto.proto.Transfer.prototype.getTokenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.Transfer.prototype.setTokenid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.BatchTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.BatchTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.BatchTransfer.displayName = 'proto.proto.BatchTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.BatchTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.BatchTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.BatchTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BatchTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    toaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.BatchTransfer}
 */
proto.proto.BatchTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.BatchTransfer;
  return proto.proto.BatchTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.BatchTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.BatchTransfer}
 */
proto.proto.BatchTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.BatchTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.BatchTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.BatchTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BatchTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string toAddress = 1;
 * @return {string}
 */
proto.proto.BatchTransfer.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.BatchTransfer.prototype.setToaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.proto.BatchTransfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.BatchTransfer.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Join = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Join, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Join.displayName = 'proto.proto.Join';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Join.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Join.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Join} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Join.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Join}
 */
proto.proto.Join.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Join;
  return proto.proto.Join.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Join} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Join}
 */
proto.proto.Join.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Join.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Join.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Join} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Join.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.proto.Join.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Join.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.proto.Join.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.Join.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InitGTC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InitGTC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.InitGTC.displayName = 'proto.proto.InitGTC';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InitGTC.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InitGTC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InitGTC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InitGTC.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InitGTC}
 */
proto.proto.InitGTC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InitGTC;
  return proto.proto.InitGTC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InitGTC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InitGTC}
 */
proto.proto.InitGTC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InitGTC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InitGTC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InitGTC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InitGTC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.InitGTC.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.InitGTC.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.proto.InitGTC.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.InitGTC.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string owner = 3;
 * @return {string}
 */
proto.proto.InitGTC.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.InitGTC.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Approve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Approve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Approve.displayName = 'proto.proto.Approve';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Approve.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Approve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Approve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Approve.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Approve}
 */
proto.proto.Approve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Approve;
  return proto.proto.Approve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Approve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Approve}
 */
proto.proto.Approve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Approve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Approve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Approve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Approve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string to = 1;
 * @return {string}
 */
proto.proto.Approve.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Approve.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 tokenid = 2;
 * @return {number}
 */
proto.proto.Approve.prototype.getTokenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.Approve.prototype.setTokenid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.UpdateRate.displayName = 'proto.proto.UpdateRate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateRate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateRate}
 */
proto.proto.UpdateRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateRate;
  return proto.proto.UpdateRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateRate}
 */
proto.proto.UpdateRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string rate = 1;
 * @return {string}
 */
proto.proto.UpdateRate.prototype.getRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.UpdateRate.prototype.setRate = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date = 2;
 * @return {string}
 */
proto.proto.UpdateRate.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.UpdateRate.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetApprovalForAll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetApprovalForAll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.SetApprovalForAll.displayName = 'proto.proto.SetApprovalForAll';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetApprovalForAll.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetApprovalForAll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetApprovalForAll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetApprovalForAll.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    approved: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetApprovalForAll}
 */
proto.proto.SetApprovalForAll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetApprovalForAll;
  return proto.proto.SetApprovalForAll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetApprovalForAll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetApprovalForAll}
 */
proto.proto.SetApprovalForAll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApproved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetApprovalForAll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetApprovalForAll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetApprovalForAll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetApprovalForAll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApproved();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string operator = 1;
 * @return {string}
 */
proto.proto.SetApprovalForAll.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.SetApprovalForAll.prototype.setOperator = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool approved = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.SetApprovalForAll.prototype.getApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.SetApprovalForAll.prototype.setApproved = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AdminTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AdminTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AdminTransfer.displayName = 'proto.proto.AdminTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AdminTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AdminTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AdminTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AdminTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AdminTransfer}
 */
proto.proto.AdminTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AdminTransfer;
  return proto.proto.AdminTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AdminTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AdminTransfer}
 */
proto.proto.AdminTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AdminTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AdminTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AdminTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AdminTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokenid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.proto.AdminTransfer.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.AdminTransfer.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.proto.AdminTransfer.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.AdminTransfer.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 tokenId = 3;
 * @return {number}
 */
proto.proto.AdminTransfer.prototype.getTokenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.AdminTransfer.prototype.setTokenid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AdminBatchTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AdminBatchTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AdminBatchTransfer.displayName = 'proto.proto.AdminBatchTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AdminBatchTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AdminBatchTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AdminBatchTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AdminBatchTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AdminBatchTransfer}
 */
proto.proto.AdminBatchTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AdminBatchTransfer;
  return proto.proto.AdminBatchTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AdminBatchTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AdminBatchTransfer}
 */
proto.proto.AdminBatchTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AdminBatchTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AdminBatchTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AdminBatchTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AdminBatchTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string fromAddress = 1;
 * @return {string}
 */
proto.proto.AdminBatchTransfer.prototype.getFromaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.AdminBatchTransfer.prototype.setFromaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string toAddress = 2;
 * @return {string}
 */
proto.proto.AdminBatchTransfer.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.AdminBatchTransfer.prototype.setToaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.proto.AdminBatchTransfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.AdminBatchTransfer.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Mint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Mint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Mint.displayName = 'proto.proto.Mint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Mint.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Mint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Mint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Mint.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    address: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Mint}
 */
proto.proto.Mint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Mint;
  return proto.proto.Mint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Mint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Mint}
 */
proto.proto.Mint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Mint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Mint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Mint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Mint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string to = 1;
 * @return {string}
 */
proto.proto.Mint.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Mint.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 amount = 2;
 * @return {number}
 */
proto.proto.Mint.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.Mint.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.proto.Mint.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.Mint.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Burn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Burn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Burn.displayName = 'proto.proto.Burn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Burn.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Burn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Burn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Burn.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Burn}
 */
proto.proto.Burn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Burn;
  return proto.proto.Burn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Burn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Burn}
 */
proto.proto.Burn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Burn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Burn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Burn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Burn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.proto.Burn.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Burn.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 amount = 2;
 * @return {number}
 */
proto.proto.Burn.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.Burn.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PrimitiveHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PrimitiveHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.PrimitiveHeader.displayName = 'proto.proto.PrimitiveHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PrimitiveHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PrimitiveHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PrimitiveHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrimitiveHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    publickey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    random: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PrimitiveHeader}
 */
proto.proto.PrimitiveHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PrimitiveHeader;
  return proto.proto.PrimitiveHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PrimitiveHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PrimitiveHeader}
 */
proto.proto.PrimitiveHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRandom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PrimitiveHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PrimitiveHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PrimitiveHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrimitiveHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRandom();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.PrimitiveHeader.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.proto.PrimitiveHeader.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.proto.PrimitiveHeader.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.PrimitiveHeader.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string publicKey = 2;
 * @return {string}
 */
proto.proto.PrimitiveHeader.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.PrimitiveHeader.prototype.setPublickey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 random = 3;
 * @return {number}
 */
proto.proto.PrimitiveHeader.prototype.getRandom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.PrimitiveHeader.prototype.setRandom = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Primitive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Primitive.oneofGroups_);
};
goog.inherits(proto.proto.Primitive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Primitive.displayName = 'proto.proto.Primitive';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Primitive.oneofGroups_ = [[10,11,12,13,14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.proto.Primitive.PrimitiveCase = {
  PRIMITIVE_NOT_SET: 0,
  UPDATERATE: 10,
  INITGTC: 11,
  APPROVE: 12,
  SETAPPROVALFORALL: 13,
  MINT: 14,
  BURN: 15,
  JOIN: 16,
  TRANSFER: 17,
  BATCHTRANSFER: 18,
  ADMINTRANSFER: 19,
  ADMINBATCHTRANSFER: 20
};

/**
 * @return {proto.proto.Primitive.PrimitiveCase}
 */
proto.proto.Primitive.prototype.getPrimitiveCase = function() {
  return /** @type {proto.proto.Primitive.PrimitiveCase} */(jspb.Message.computeOneofCase(this, proto.proto.Primitive.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Primitive.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Primitive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Primitive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Primitive.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.proto.PrimitiveHeader.toObject(includeInstance, f),
    updaterate: (f = msg.getUpdaterate()) && proto.proto.UpdateRate.toObject(includeInstance, f),
    initgtc: (f = msg.getInitgtc()) && proto.proto.InitGTC.toObject(includeInstance, f),
    approve: (f = msg.getApprove()) && proto.proto.Approve.toObject(includeInstance, f),
    setapprovalforall: (f = msg.getSetapprovalforall()) && proto.proto.SetApprovalForAll.toObject(includeInstance, f),
    mint: (f = msg.getMint()) && proto.proto.Mint.toObject(includeInstance, f),
    burn: (f = msg.getBurn()) && proto.proto.Burn.toObject(includeInstance, f),
    join: (f = msg.getJoin()) && proto.proto.Join.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.proto.Transfer.toObject(includeInstance, f),
    batchtransfer: (f = msg.getBatchtransfer()) && proto.proto.BatchTransfer.toObject(includeInstance, f),
    admintransfer: (f = msg.getAdmintransfer()) && proto.proto.AdminTransfer.toObject(includeInstance, f),
    adminbatchtransfer: (f = msg.getAdminbatchtransfer()) && proto.proto.AdminBatchTransfer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Primitive}
 */
proto.proto.Primitive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Primitive;
  return proto.proto.Primitive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Primitive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Primitive}
 */
proto.proto.Primitive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.PrimitiveHeader;
      reader.readMessage(value,proto.proto.PrimitiveHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 10:
      var value = new proto.proto.UpdateRate;
      reader.readMessage(value,proto.proto.UpdateRate.deserializeBinaryFromReader);
      msg.setUpdaterate(value);
      break;
    case 11:
      var value = new proto.proto.InitGTC;
      reader.readMessage(value,proto.proto.InitGTC.deserializeBinaryFromReader);
      msg.setInitgtc(value);
      break;
    case 12:
      var value = new proto.proto.Approve;
      reader.readMessage(value,proto.proto.Approve.deserializeBinaryFromReader);
      msg.setApprove(value);
      break;
    case 13:
      var value = new proto.proto.SetApprovalForAll;
      reader.readMessage(value,proto.proto.SetApprovalForAll.deserializeBinaryFromReader);
      msg.setSetapprovalforall(value);
      break;
    case 14:
      var value = new proto.proto.Mint;
      reader.readMessage(value,proto.proto.Mint.deserializeBinaryFromReader);
      msg.setMint(value);
      break;
    case 15:
      var value = new proto.proto.Burn;
      reader.readMessage(value,proto.proto.Burn.deserializeBinaryFromReader);
      msg.setBurn(value);
      break;
    case 16:
      var value = new proto.proto.Join;
      reader.readMessage(value,proto.proto.Join.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 17:
      var value = new proto.proto.Transfer;
      reader.readMessage(value,proto.proto.Transfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 18:
      var value = new proto.proto.BatchTransfer;
      reader.readMessage(value,proto.proto.BatchTransfer.deserializeBinaryFromReader);
      msg.setBatchtransfer(value);
      break;
    case 19:
      var value = new proto.proto.AdminTransfer;
      reader.readMessage(value,proto.proto.AdminTransfer.deserializeBinaryFromReader);
      msg.setAdmintransfer(value);
      break;
    case 20:
      var value = new proto.proto.AdminBatchTransfer;
      reader.readMessage(value,proto.proto.AdminBatchTransfer.deserializeBinaryFromReader);
      msg.setAdminbatchtransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Primitive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Primitive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Primitive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Primitive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.PrimitiveHeader.serializeBinaryToWriter
    );
  }
  f = message.getUpdaterate();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.UpdateRate.serializeBinaryToWriter
    );
  }
  f = message.getInitgtc();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.InitGTC.serializeBinaryToWriter
    );
  }
  f = message.getApprove();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.Approve.serializeBinaryToWriter
    );
  }
  f = message.getSetapprovalforall();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.SetApprovalForAll.serializeBinaryToWriter
    );
  }
  f = message.getMint();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.Mint.serializeBinaryToWriter
    );
  }
  f = message.getBurn();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.proto.Burn.serializeBinaryToWriter
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.proto.Join.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.proto.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getBatchtransfer();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.proto.BatchTransfer.serializeBinaryToWriter
    );
  }
  f = message.getAdmintransfer();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.proto.AdminTransfer.serializeBinaryToWriter
    );
  }
  f = message.getAdminbatchtransfer();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.proto.AdminBatchTransfer.serializeBinaryToWriter
    );
  }
};


/**
 * optional PrimitiveHeader header = 1;
 * @return {?proto.proto.PrimitiveHeader}
 */
proto.proto.Primitive.prototype.getHeader = function() {
  return /** @type{?proto.proto.PrimitiveHeader} */ (
    jspb.Message.getWrapperField(this, proto.proto.PrimitiveHeader, 1));
};


/** @param {?proto.proto.PrimitiveHeader|undefined} value */
proto.proto.Primitive.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.Primitive.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateRate updateRate = 10;
 * @return {?proto.proto.UpdateRate}
 */
proto.proto.Primitive.prototype.getUpdaterate = function() {
  return /** @type{?proto.proto.UpdateRate} */ (
    jspb.Message.getWrapperField(this, proto.proto.UpdateRate, 10));
};


/** @param {?proto.proto.UpdateRate|undefined} value */
proto.proto.Primitive.prototype.setUpdaterate = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearUpdaterate = function() {
  this.setUpdaterate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasUpdaterate = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional InitGTC initGTC = 11;
 * @return {?proto.proto.InitGTC}
 */
proto.proto.Primitive.prototype.getInitgtc = function() {
  return /** @type{?proto.proto.InitGTC} */ (
    jspb.Message.getWrapperField(this, proto.proto.InitGTC, 11));
};


/** @param {?proto.proto.InitGTC|undefined} value */
proto.proto.Primitive.prototype.setInitgtc = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearInitgtc = function() {
  this.setInitgtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasInitgtc = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Approve approve = 12;
 * @return {?proto.proto.Approve}
 */
proto.proto.Primitive.prototype.getApprove = function() {
  return /** @type{?proto.proto.Approve} */ (
    jspb.Message.getWrapperField(this, proto.proto.Approve, 12));
};


/** @param {?proto.proto.Approve|undefined} value */
proto.proto.Primitive.prototype.setApprove = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearApprove = function() {
  this.setApprove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasApprove = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SetApprovalForAll setApprovalForAll = 13;
 * @return {?proto.proto.SetApprovalForAll}
 */
proto.proto.Primitive.prototype.getSetapprovalforall = function() {
  return /** @type{?proto.proto.SetApprovalForAll} */ (
    jspb.Message.getWrapperField(this, proto.proto.SetApprovalForAll, 13));
};


/** @param {?proto.proto.SetApprovalForAll|undefined} value */
proto.proto.Primitive.prototype.setSetapprovalforall = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearSetapprovalforall = function() {
  this.setSetapprovalforall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasSetapprovalforall = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Mint mint = 14;
 * @return {?proto.proto.Mint}
 */
proto.proto.Primitive.prototype.getMint = function() {
  return /** @type{?proto.proto.Mint} */ (
    jspb.Message.getWrapperField(this, proto.proto.Mint, 14));
};


/** @param {?proto.proto.Mint|undefined} value */
proto.proto.Primitive.prototype.setMint = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearMint = function() {
  this.setMint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasMint = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Burn burn = 15;
 * @return {?proto.proto.Burn}
 */
proto.proto.Primitive.prototype.getBurn = function() {
  return /** @type{?proto.proto.Burn} */ (
    jspb.Message.getWrapperField(this, proto.proto.Burn, 15));
};


/** @param {?proto.proto.Burn|undefined} value */
proto.proto.Primitive.prototype.setBurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearBurn = function() {
  this.setBurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasBurn = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Join join = 16;
 * @return {?proto.proto.Join}
 */
proto.proto.Primitive.prototype.getJoin = function() {
  return /** @type{?proto.proto.Join} */ (
    jspb.Message.getWrapperField(this, proto.proto.Join, 16));
};


/** @param {?proto.proto.Join|undefined} value */
proto.proto.Primitive.prototype.setJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearJoin = function() {
  this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Transfer transfer = 17;
 * @return {?proto.proto.Transfer}
 */
proto.proto.Primitive.prototype.getTransfer = function() {
  return /** @type{?proto.proto.Transfer} */ (
    jspb.Message.getWrapperField(this, proto.proto.Transfer, 17));
};


/** @param {?proto.proto.Transfer|undefined} value */
proto.proto.Primitive.prototype.setTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearTransfer = function() {
  this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional BatchTransfer batchTransfer = 18;
 * @return {?proto.proto.BatchTransfer}
 */
proto.proto.Primitive.prototype.getBatchtransfer = function() {
  return /** @type{?proto.proto.BatchTransfer} */ (
    jspb.Message.getWrapperField(this, proto.proto.BatchTransfer, 18));
};


/** @param {?proto.proto.BatchTransfer|undefined} value */
proto.proto.Primitive.prototype.setBatchtransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearBatchtransfer = function() {
  this.setBatchtransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasBatchtransfer = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional AdminTransfer adminTransfer = 19;
 * @return {?proto.proto.AdminTransfer}
 */
proto.proto.Primitive.prototype.getAdmintransfer = function() {
  return /** @type{?proto.proto.AdminTransfer} */ (
    jspb.Message.getWrapperField(this, proto.proto.AdminTransfer, 19));
};


/** @param {?proto.proto.AdminTransfer|undefined} value */
proto.proto.Primitive.prototype.setAdmintransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearAdmintransfer = function() {
  this.setAdmintransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasAdmintransfer = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional AdminBatchTransfer adminBatchTransfer = 20;
 * @return {?proto.proto.AdminBatchTransfer}
 */
proto.proto.Primitive.prototype.getAdminbatchtransfer = function() {
  return /** @type{?proto.proto.AdminBatchTransfer} */ (
    jspb.Message.getWrapperField(this, proto.proto.AdminBatchTransfer, 20));
};


/** @param {?proto.proto.AdminBatchTransfer|undefined} value */
proto.proto.Primitive.prototype.setAdminbatchtransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.proto.Primitive.oneofGroups_[0], value);
};


proto.proto.Primitive.prototype.clearAdminbatchtransfer = function() {
  this.setAdminbatchtransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Primitive.prototype.hasAdminbatchtransfer = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.proto);
